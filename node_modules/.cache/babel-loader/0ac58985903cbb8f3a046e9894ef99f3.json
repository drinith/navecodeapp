{"ast":null,"code":"// import React, { createContext, useEffect, useState } from 'react'\n// import axios from 'axios';//Axios é um cliente HTTP baseado em Promises para fazer requisições.\n// import keys from './config/keys'\nexport const myContext = createContext({\n  name: \"default\",\n  cargo: 'default'\n}); // //Buscar o usuário que está na API se existir e jogar no contexto\n// const Context = (props) => {\n//     const [userObject, setUserObject] = useState({name:\"default\",cargo:'default'});\n//     const [cargo,setCargo]=useState();\n//     useEffect(() => {\n//         console.log(keys.serverApi)\n//         axios.get('http://'+keys.serverApi + \"/getuser\", { withCredentials: true }).then((res) => {\n//             console.log(res.data);\n//             if (res.data) {\n//                 setUserObject(res.data);\n//             }\n//         })\n//     }, [])\n//     return (\n//         <myContext.Provider value={{ name: userObject.name}}>{props.children}</myContext.Provider>\n//     )\n// }\n// export default Context;","map":{"version":3,"sources":["/Users/imac/Documents/projects/DevTech/navecodeapp/src/Context.js"],"names":["myContext","createContext","name","cargo"],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,MAAMA,SAAS,GAAGC,aAAa,CAAC;AACnCC,EAAAA,IAAI,EAAC,SAD8B;AAEnCC,EAAAA,KAAK,EAAC;AAF6B,CAAD,CAA/B,C,CAKP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { createContext, useEffect, useState } from 'react'\n// import axios from 'axios';//Axios é um cliente HTTP baseado em Promises para fazer requisições.\n// import keys from './config/keys'\n\nexport const myContext = createContext({\n    name:\"default\",\n    cargo:'default'\n});\n\n// //Buscar o usuário que está na API se existir e jogar no contexto\n// const Context = (props) => {\n//     const [userObject, setUserObject] = useState({name:\"default\",cargo:'default'});\n//     const [cargo,setCargo]=useState();\n\n//     useEffect(() => {\n//         console.log(keys.serverApi)\n//         axios.get('http://'+keys.serverApi + \"/getuser\", { withCredentials: true }).then((res) => {\n//             console.log(res.data);\n//             if (res.data) {\n//                 setUserObject(res.data);\n//             }\n//         })\n//     }, [])\n\n//     return (\n//         <myContext.Provider value={{ name: userObject.name}}>{props.children}</myContext.Provider>\n//     )\n// }\n// export default Context;\n\n"]},"metadata":{},"sourceType":"module"}